{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Food Ordering System with backend connection (firebase)\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card\";\nimport classes from \"./AvailableMeals.module.css\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  meals: [],\n  isLoading: false,\n  httpError: null\n};\n\nconst stateReducer = (state, action) => {\n  if (action.type === \"MEALS-LOADED\") {\n    return {\n      meals: action.value,\n      is\n    };\n  }\n\n  return initialState;\n};\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n  useEffect(() => {\n    const fetchMeals = async () => {\n      try {\n        const response = await fetch(\"https://food-ordering-system-cf216-default-rtdb.firebaseio.com/meals.json\");\n\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!!!\");\n        }\n\n        const responseData = await response.json();\n        const loadedMeals = [];\n\n        for (const key in responseData) {\n          loadedMeals.push({\n            key: key,\n            id: key,\n            name: responseData[key].name,\n            description: responseData[key].description,\n            price: responseData[key].price\n          });\n        }\n\n        dispatch({\n          type: \"MEALS-LOADED\",\n          value: loadedMeals\n        });\n        setMeals(loadedMeals);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        setHttpError(error.message);\n      }\n    };\n\n    fetchMeals();\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"g49NT90DJvA3AixyhMxET2a783c=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["D:/React/Food Ordering System with backend connection (firebase)/src/components/Meals/AvailableMeals.js"],"names":["useState","useEffect","useReducer","Card","classes","MealItem","initialState","meals","isLoading","httpError","stateReducer","state","action","type","value","is","AvailableMeals","setMeals","setIsLoading","setHttpError","dispatch","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer} from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nconst initialState = {\r\n  meals: [],\r\n  isLoading: false,\r\n  httpError: null\r\n};\r\nconst stateReducer = (state, action) => {\r\n  if(action.type === \"MEALS-LOADED\"){\r\n    return{\r\n      meals: action.value,\r\n      is\r\n    }\r\n  }\r\n return initialState;\r\n};\r\n\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  const [state, dispatch] = useReducer(stateReducer, initialState)\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://food-ordering-system-cf216-default-rtdb.firebaseio.com/meals.json\"\r\n        );\r\n\r\n        if(!response.ok){\r\n          throw new Error(\"Something went wrong!!!\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n\r\n        const loadedMeals = [];\r\n\r\n        for (const key in responseData) {\r\n          loadedMeals.push({\r\n            key: key,\r\n            id: key,\r\n            name: responseData[key].name,\r\n            description: responseData[key].description,\r\n            price: responseData[key].price,\r\n          });\r\n        }\r\n        dispatch({\r\n          type: \"MEALS-LOADED\",\r\n          value: loadedMeals\r\n        })\r\n        setMeals(loadedMeals);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        setHttpError(error.message);\r\n      }\r\n    };\r\n    fetchMeals();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        <p>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}