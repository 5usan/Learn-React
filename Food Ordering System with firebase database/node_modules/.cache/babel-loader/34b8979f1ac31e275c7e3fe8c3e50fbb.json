{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Food Ordering System with backend connection (firebase)\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card\";\nimport classes from \"./AvailableMeals.module.css\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  meals: [],\n  isLoading: true,\n  httpError: null\n};\n\nconst stateReducer = (state, action) => {\n  if (action.type === \"MEALS-LOADED\") {\n    console.log(\"Loaded State\");\n    return {\n      meals: action.value,\n      isLoading: false,\n      httpError: null\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    console.log(\"ERROR State\");\n    console.log(action.value);\n    return {\n      meals: null,\n      isLoading: false,\n      httpError: action.value\n    };\n  }\n\n  return initialState;\n};\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(stateReducer, initialState);\n  useEffect(() => {\n    const fetchMeals = async () => {\n      try {\n        const response = await fetch(\"https://food-ordering-system-cf216-default-rtdb.firebaseio.com/meals.js\");\n\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!!!\");\n        }\n\n        const responseData = await response.json();\n        const loadedMeals = [];\n\n        for (const key in responseData) {\n          loadedMeals.push({\n            key: key,\n            id: key,\n            name: responseData[key].name,\n            description: responseData[key].description,\n            price: responseData[key].price\n          });\n        }\n\n        dispatch({\n          type: \"MEALS-LOADED\",\n          value: loadedMeals\n        });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          value: error.message\n        });\n      }\n    };\n\n    fetchMeals();\n  }, []);\n\n  if (state.isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (state.httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = state.meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["D:/React/Food Ordering System with backend connection (firebase)/src/components/Meals/AvailableMeals.js"],"names":["useState","useEffect","useReducer","Card","classes","MealItem","initialState","meals","isLoading","httpError","stateReducer","state","action","type","console","log","value","AvailableMeals","dispatch","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nconst initialState = {\r\n  meals: [],\r\n  isLoading: true,\r\n  httpError: null,\r\n};\r\nconst stateReducer = (state, action) => {\r\n  if (action.type === \"MEALS-LOADED\") {\r\n    console.log(\"Loaded State\");\r\n    return {\r\n      meals: action.value,\r\n      isLoading: false,\r\n      httpError: null,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ERROR\") {\r\n    console.log(\"ERROR State\");\r\n    console.log(action.value)\r\n    return {\r\n      meals: null,\r\n      isLoading: false,\r\n      httpError: action.value,\r\n    };\r\n  }\r\n  return initialState;\r\n};\r\n\r\nconst AvailableMeals = () => {\r\n  const [state, dispatch] = useReducer(stateReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://food-ordering-system-cf216-default-rtdb.firebaseio.com/meals.js\"\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong!!!\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n\r\n        const loadedMeals = [];\r\n\r\n        for (const key in responseData) {\r\n          loadedMeals.push({\r\n            key: key,\r\n            id: key,\r\n            name: responseData[key].name,\r\n            description: responseData[key].description,\r\n            price: responseData[key].price,\r\n          });\r\n        }\r\n        dispatch({\r\n          type: \"MEALS-LOADED\",\r\n          value: loadedMeals,\r\n        });\r\n      } catch (error) {\r\n        dispatch({\r\n          type: \"ERROR\",\r\n          value: error.message,\r\n        });\r\n      }\r\n    };\r\n    fetchMeals();\r\n  }, []);\r\n\r\n  if (state.isLoading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        <p>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (state.httpError) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const mealsList = state.meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}