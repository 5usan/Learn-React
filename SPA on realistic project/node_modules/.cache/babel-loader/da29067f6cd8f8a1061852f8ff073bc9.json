{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\SPA on realistic project\\\\src\\\\pages\\\\AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllQuotes = () => {\n  _s();\n\n  const {\n    sendRequest,\n    httpState\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (httpstatus === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focus\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: loadedQuotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AllQuotes, \"6JrU0XFBST5yuYrWkc7TGDbRc7E=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["D:/React/SPA on realistic project/src/pages/AllQuotes.js"],"names":["useEffect","useHttp","getAllQuotes","QuoteList","LoadingSpinner","NoQuotesFound","AllQuotes","sendRequest","httpState","httpstatus","error","status","loadedQuotes","length"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA;AAFI,MAGFP,OAAO,CAACC,YAAD,EAAe,IAAf,CAHX;AAKAF,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAIE,UAAU,KAAK,SAAnB,EAA8B;AAC5B,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIC,KAAJ,EAAW;AACT,wBACE;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIC,MAAM,KAAK,WAAX,KAA2B,CAACC,YAAD,IAAiBA,YAAY,CAACC,MAAb,KAAwB,CAApE,CAAJ,EAA4E;AAC1E,wBACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAED,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAED;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjCD;;GAAMN,S;UAIAL,O;;;KAJAK,S;AAmCN,eAAeA,SAAf","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\"\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    httpState\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (httpstatus === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <p className=\"centered focus\">\r\n        {error}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return (\r\n      <NoQuotesFound />\r\n    );\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"]},"metadata":{},"sourceType":"module"}