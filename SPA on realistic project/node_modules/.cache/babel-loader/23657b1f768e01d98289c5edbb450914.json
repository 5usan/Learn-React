{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useCallback } from 'react';\n\nconst httpReducer = (state, action) => {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending'\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed'\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed'\n    };\n  }\n\n  return state;\n};\n\nconst useHttp = function (requestFunction) {\n  _s();\n\n  let startWithPending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null\n  });\n  const sendRequest = useCallback(async function (requestData) {\n    dispatch({\n      type: 'SEND'\n    });\n\n    try {\n      const responseData = await requestFunction(requestData);\n      dispatch({\n        type: 'SUCCESS',\n        responseData\n      });\n    } catch (error) {\n      dispatch({\n        type: 'ERROR',\n        errorMessage: error.message || 'Something went wrong!'\n      });\n    }\n  }, [requestFunction]);\n  return {\n    sendRequest,\n    ...httpState\n  };\n};\n\n_s(useHttp, \"7Qew6E1pBmm3SF5eGZwOviyWzfw=\");\n\nexport default useHttp;","map":{"version":3,"sources":["D:/React/SPA on realistic project/src/hooks/use-http.js"],"names":["useReducer","useCallback","httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","httpState","dispatch","sendRequest","requestData","message"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,MAAIJ,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,WAAO;AACLC,MAAAA,IAAI,EAAEF,MAAM,CAACK,YADR;AAELF,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,MAAIJ,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,KAAK,EAAEH,MAAM,CAACM,YAFT;AAGLF,MAAAA,MAAM,EAAE;AAHH,KAAP;AAKD;;AAED,SAAOL,KAAP;AACD,CA1BD;;AA4BA,MAAMQ,OAAO,GAAG,UAACC,eAAD,EAA+C;AAAA;;AAAA,MAA7BC,gBAA6B,uEAAV,KAAU;AAC7D,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBf,UAAU,CAACE,WAAD,EAAc;AACpDM,IAAAA,MAAM,EAAEK,gBAAgB,GAAG,SAAH,GAAe,IADa;AAEpDP,IAAAA,IAAI,EAAE,IAF8C;AAGpDC,IAAAA,KAAK,EAAE;AAH6C,GAAd,CAAxC;AAMA,QAAMS,WAAW,GAAGf,WAAW,CAC7B,gBAAgBgB,WAAhB,EAA6B;AAC3BF,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAMI,YAAY,GAAG,MAAMG,eAAe,CAACK,WAAD,CAA1C;AAEAF,MAAAA,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAE,SAAR;AAAmBI,QAAAA;AAAnB,OAAD,CAAR;AACD,KAJD,CAIE,OAAOF,KAAP,EAAc;AACdQ,MAAAA,QAAQ,CAAC;AACPV,QAAAA,IAAI,EAAE,OADC;AAEPK,QAAAA,YAAY,EAAEH,KAAK,CAACW,OAAN,IAAiB;AAFxB,OAAD,CAAR;AAID;AACF,GAb4B,EAc7B,CAACN,eAAD,CAd6B,CAA/B;AAiBA,SAAO;AACLI,IAAAA,WADK;AAEL,OAAGF;AAFE,GAAP;AAID,CA5BD;;GAAMH,O;;AA8BN,eAAeA,OAAf","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nconst httpReducer = (state, action) => {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nconst useHttp = (requestFunction, startWithPending = false) => {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}