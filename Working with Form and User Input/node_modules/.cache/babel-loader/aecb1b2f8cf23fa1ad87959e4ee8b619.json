{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    valueChangeHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["D:/React/Working with forms and user inputs/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","reset","isValid"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACAN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHH;;AAKE,QAAMO,KAAK,GAAG,MAAM;AAChBT,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKF,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHK,IAAAA,QAAQ,EAAEA,QAFP;AAGHM,IAAAA,OAAO,EAAEP,YAHN;AAIHE,IAAAA,kBAJG;AAKHI,IAAAA;AALG,GAAP;AAOH,CAxBD;;GAAMZ,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import {useState} from 'react';\r\n\r\nconst useInput = (validateValue) => {\r\n    const [enteredValue, setEnteredValue] = useState(\"\");\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValid = validateValue(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n    const valueChangeHandler = (event) => {\r\n        setEnteredValue(event.target.value);\r\n        setIsTouched(true);\r\n      };\r\n\r\n      const reset = () => {\r\n          setEnteredValue('');\r\n          setIsTouched(false);\r\n      }\r\n\r\n    return {\r\n        value: enteredValue,\r\n        hasError: hasError,\r\n        isValid: valueIsValid,\r\n        valueChangeHandler, \r\n        reset\r\n    };\r\n};\r\n\r\nexport default useInput;"]},"metadata":{},"sourceType":"module"}