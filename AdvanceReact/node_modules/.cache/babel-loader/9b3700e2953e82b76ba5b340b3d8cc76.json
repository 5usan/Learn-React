{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport uiActions from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n}); // export const sentCartData = (cart) => {\n//   return async (dispatch) => {\n//     dispatch(\n//       uiActions.showNotification({\n//         status: \"pending\",\n//         title: \"Sending...\",\n//         message: \"Sending cart data!\",\n//       })\n//     );\n//     const sendRequest = async () => {\n//       const response = await fetch(\n//         \"https://react-http-6b4a6.firebaseio.com/cart.json\",\n//         {\n//           method: \"PUT\",\n//           body: JSON.stringify(cart),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Sending cart data failed.\");\n//       }\n//     };\n//     try {\n//       await sendRequest();\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"success\",\n//           title: \"Success!\",\n//           message: \"Sent cart data successfully!\",\n//         })\n//       );\n//     } catch (error) {\n//       dispatch(\n//         uiActions.showNotification({\n//           status: \"error\",\n//           title: \"Error!\",\n//           message: \"Sending cart data failed!\",\n//         })\n//       );\n//     }\n//   };\n// };\n\nexport default cartSlice;","map":{"version":3,"sources":["D:/React/Advance React/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE;AAFH,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAE3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKff,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALC,SAAjB;AAOD,OARD,MAQO;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACD;AACF,KAlBO;;AAmBRI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAIO,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACD;AACF;;AA5BO;AANkB,CAAD,CAA7B,C,CAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport uiActions from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n// export const sentCartData = (cart) => {\r\n//   return async (dispatch) => {\r\n//     dispatch(\r\n//       uiActions.showNotification({\r\n//         status: \"pending\",\r\n//         title: \"Sending...\",\r\n//         message: \"Sending cart data!\",\r\n//       })\r\n//     );\r\n\r\n//     const sendRequest = async () => {\r\n//       const response = await fetch(\r\n//         \"https://react-http-6b4a6.firebaseio.com/cart.json\",\r\n//         {\r\n//           method: \"PUT\",\r\n//           body: JSON.stringify(cart),\r\n//         }\r\n//       );\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Sending cart data failed.\");\r\n//       }\r\n//     };\r\n\r\n//     try {\r\n//       await sendRequest();\r\n\r\n//       dispatch(\r\n//         uiActions.showNotification({\r\n//           status: \"success\",\r\n//           title: \"Success!\",\r\n//           message: \"Sent cart data successfully!\",\r\n//         })\r\n//       );\r\n//     } catch (error) {\r\n//       dispatch(\r\n//         uiActions.showNotification({\r\n//           status: \"error\",\r\n//           title: \"Error!\",\r\n//           message: \"Sending cart data failed!\",\r\n//         })\r\n//       );\r\n//     }\r\n//   };\r\n// };\r\n\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}