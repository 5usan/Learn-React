{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./index\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      console.log(newItem);\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\nexport const sentCartData = async (cart, dispatch) => {\n  return async () => {\n    // dispatch(\n    //   uiActions.showNotification({\n    //     status: \"pending\",\n    //     title: \"Sending...\",\n    //     message: \"Sending cart data!\",\n    //   })\n    // );\n    const sendRequest = async () => {\n      const response = await fetch(\"https://redux-thunk-84fa0-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n    }\n  };\n};\nexport default cartSlice;","map":{"version":3,"sources":["D:/React/Advance React/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","console","log","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sentCartData","cart","dispatch","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","showNotification","status","message","error"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { uiActions } from \"./index\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      console.log(newItem);\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sentCartData = async (cart, dispatch) => {\r\n  return async () => {\r\n    // dispatch(\r\n    //   uiActions.showNotification({\r\n    //     status: \"pending\",\r\n    //     title: \"Sending...\",\r\n    //     message: \"Sending cart data!\",\r\n    //   })\r\n    // );\r\n\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-thunk-84fa0-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendRequest();\r\n\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success!\",\r\n          message: \"Sent cart data successfully!\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sending cart data failed!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}