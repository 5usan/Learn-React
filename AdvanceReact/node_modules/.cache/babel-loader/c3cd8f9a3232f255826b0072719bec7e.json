{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cartValues\",\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sentCartData = () => {\n  return async dispa => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending Cart Data To The Server!!!\"\n    }));\n    const response = await fetch(\"https://redux-with-backend-default-rtdb.firebaseio.com/cart.json\", {\n      // method: \"POST\", //Add the http request in previous http request\n      method: \"PUT\",\n      //Overwrite the previous http request\n      body: JSON.stringify(cart)\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Sending cart data failed.\");\n    }\n  };\n};\nexport default cartSlice;","map":{"version":3,"sources":["D:/React/Advance React/src/store/cart-slice.js"],"names":["createSlice","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sentCartData","dispa","dispatch","uiActions","showNotification","status","message","response","fetch","method","body","JSON","stringify","cart","ok","Error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,aAAa,EAAE;AAFQ,CAAzB;AAKA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAE,YADsB;AAE5BC,EAAAA,YAAY,EAAEL,gBAFc;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAI,CAACU,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACP,KAAN,CAAYe,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKfb,UAAAA,IAAI,EAAEM,OAAO,CAACU;AALC,SAAjB;AAOD,OARD,MAQO;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACD;AACF,KAjBO;;AAkBRI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAIU,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYqB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACD;AACF;;AA5BO;AAHkB,CAAD,CAA7B;AAmCA,OAAO,MAAMM,YAAY,GAAG,MAAM;AAChC,SAAO,MAAOC,KAAP,IAAiB;AACtBC,IAAAA,QAAQ,CACNC,SAAS,CAACC,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBR,MAAAA,KAAK,EAAE,YAFkB;AAGzBS,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;AAOA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAD0B,EAE1B;AACE;AACAC,MAAAA,MAAM,EAAE,KAFV;AAEiB;AACfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,IAAf;AAHR,KAF0B,CAA5B;;AASA,QAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,GApBD;AAqBD,CAtBM;AAwBP,eAAenC,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCartState = {\r\n  items: [],\r\n  totalQuantity: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cartValues\",\r\n  initialState: initialCartState,\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--; \r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter(item => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sentCartData = () => {\r\n  return async (dispa) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending Cart Data To The Server!!!\",\r\n      })\r\n    );\r\n    const response = await fetch(\r\n      \"https://redux-with-backend-default-rtdb.firebaseio.com/cart.json\",\r\n      {\r\n        // method: \"POST\", //Add the http request in previous http request\r\n        method: \"PUT\", //Overwrite the previous http request\r\n        body: JSON.stringify(cart),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Sending cart data failed.\");\r\n    }\r\n  }\r\n};\r\n\r\nexport default cartSlice;\r\n"]},"metadata":{},"sourceType":"module"}